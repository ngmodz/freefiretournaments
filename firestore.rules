rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow read/write access to user's own profile only
    match /users/{userId} {
      // Allow anyone to read user profiles (for tournament host display)
      allow read: if true;
      
      // Allow creation with slightly more permissive rules - either:
      // 1. The authenticated user is creating their own document
      // 2. The document doesn't exist yet (first creation during registration)
      allow create: if request.auth != null && (
        request.auth.uid == userId || 
        !exists(/databases/$(database)/documents/users/$(userId))
      );
      
      // Normal update rules - only allow the owner to update
      allow update: if request.auth != null && (
        // Allow user to update their own document
        request.auth.uid == userId ||
        // Allow a transaction to update only the wallet field.
        // WARNING: This is a security tradeoff. Ideally, this operation should be
        // handled by a Cloud Function. This rule allows any authenticated user to
        // initiate a transaction that updates another user's wallet. We rely on the
        // other rules in the prize distribution transaction (like the secure 
        // creditTransaction rule) to prevent abuse.
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['wallet']))
      );
      
      // Allow users to delete their own profiles
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Tournament-related rules
    match /tournaments/{tournamentId} {
      allow read: if true; // Anyone can view tournaments
      allow create: if request.auth != null; // Any authenticated user can create tournaments
      
      // SPECIAL RULE FOR NOTIFICATION SYSTEM
      // Allow updates to just the notificationSent field by anyone
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['notificationSent']) ||
                    (
                      // Regular update rule for tournament hosts and admins
                      request.auth != null && 
                      (
                       // Admin users can update anything
                       request.auth.token.admin == true || 
                       
                       // Tournament hosts can update their tournaments
                       resource.data.host_id == request.auth.uid ||
                       
                       // Special rule for users joining tournaments
                       (
                         // Only allow updates to participants and filled_spots fields
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'filled_spots']) &&
                         
                         // Ensure filled_spots is only incremented by 1
                         request.resource.data.filled_spots == resource.data.filled_spots + 1 &&
                         
                         // Ensure participants array only has the current user's ID added
                         request.resource.data.participants.size() == resource.data.participants.size() + 1 &&
                         request.resource.data.participants.hasAll(resource.data.participants) &&
                         
                         // Make sure the added UID is the current user
                         request.resource.data.participants.removeAll(resource.data.participants).hasOnly([request.auth.uid]) &&
                         
                         // Ensure the user isn't already in the participants list
                         !resource.data.participants.hasAny([request.auth.uid]) &&
                         
                         // Check that the tournament isn't full
                         resource.data.filled_spots < resource.data.max_players &&
                         
                         // Check that tournament is in 'active' status
                         resource.data.status == 'active'
                       )
                      )
                    );
      
      allow delete: if request.auth != null && 
                    (request.auth.token.admin == true || 
                     resource.data.host_id == request.auth.uid ||
                     // Allow system deletion for expired tournaments
                     (resource.data.ttl != null && resource.data.ttl <= request.time));
    }
    
    // Important: Allow users to list tournaments they host
    match /tournaments {
      allow list: if request.auth != null && 
                  request.query.limit <= 100 && 
                  request.query.where.size() > 0 && 
                  request.query.where[0][0] == 'host_id' && 
                  request.query.where[0][1] == '==' && 
                  request.query.where[0][2] == request.auth.uid;
    }
    
    // Tournament drafts
    match /tournament_drafts/{draftId} {
      allow read: if request.auth != null && resource.data.host_id == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.host_id == request.auth.uid;
      allow update: if request.auth != null && 
                    (resource.data.host_id == request.auth.uid && 
                     request.resource.data.host_id == request.auth.uid);
      allow delete: if request.auth != null && resource.data.host_id == request.auth.uid;
    }
    
    // Allow users to create verification requests for IGN/UID
    match /verification_requests/{requestId} {
      allow read: if request.auth != null && 
                   (resource.data.userId == request.auth.uid ||
                   request.auth.token.admin == true);
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Credit rules - allow users to access only their own wallet in user document
    match /users/{userId} {
      // Already covered by the rules above, but adding this clarification for credit-related operations
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Tournament credit and host credit transactions
    match /creditTransactions/{transactionId} {
      // Allow reading any credit transaction if the user ID matches the authenticated user
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid
      );
      
      // Allow creating credit transactions if userID matches authenticated user
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        // Allow tournament host to create a 'tournament_win' transaction for a winner.
        // This is secure because we verify the requester is the host of the tournament.
        (
          request.resource.data.type == 'tournament_win' &&
          get(/databases/$(database)/documents/tournaments/$(request.resource.data.transactionDetails.tournamentId)).data.host_id == request.auth.uid
        )
      );
      
      // No updates or deletions for credit transactions
      allow update: if false;
      allow delete: if false;
    }
    
    // Important: Allow users to list their own credit transactions
    match /creditTransactions {
      allow list: if request.auth != null && request.query.limit <= 100 && 
                  request.query.where.size() > 0 && 
                  request.query.where[0][0] == 'userId' && 
                  request.query.where[0][1] == '==' && 
                  request.query.where[0][2] == request.auth.uid;
    }
    
    // Rules for withdrawal requests
    match /withdrawalRequests/{requestId} {
      // Allow user to create a withdrawal request for themselves
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Allow user to read their own withdrawal requests
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        request.auth.token.admin == true
      );
      
      // Only admins can update the status (e.g., to 'completed') or delete
      allow update, delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Admins can list all withdrawal requests. Users can only list their own.
    match /withdrawalRequests {
      // Allow admins to list all withdrawal requests without constraints
      allow list: if request.auth != null && (
          request.auth.token.admin == true || 
          (
            request.query.limit <= 100 && 
            request.query.where.size() > 0 && 
            request.query.where[0][0] == 'userId' && 
            request.query.where[0][1] == '==' && 
            request.query.where[0][2] == request.auth.uid
          )
        );
    }

    // Legacy wallet and transaction rules - keeping for backward compatibility
    // Wallet rules - allow users to access only their own wallet
    match /wallets/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId; // Allow wallet deletion if owned by user
    }
    
    // Simplified transaction rules
    match /transactions/{transactionId} {
      // Allow reading any transaction if the user ID matches the authenticated user
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid
      );
      
      // Allow creating transactions if userID matches authenticated user
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid
      );
      
      // No updates, but allow deletions for own transactions
      allow update: if false;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Important: Allow users to list their own transactions
    match /transactions {
      allow list: if request.auth != null && request.query.limit <= 100 && 
                  request.query.where.size() > 0 && 
                  request.query.where[0][0] == 'userId' && 
                  request.query.where[0][1] == '==' && 
                  request.query.where[0][2] == request.auth.uid;
    }
    
    // Explicitly deny access to test_connection collection
    match /test_connection/{document=**} {
      allow read, write: if false;
    }
    
    // Default deny all rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 